#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

# Convert a CSV file into a KeePass 2 XML file.

require 'base64'
require 'csv'
require 'htmlentities'
require 'optparse'
require 'securerandom'

VERSION = '0.0.2'

# See https://sourceforge.net/p/keepass/discussion/329220/thread/6d1d20a8/
def poor_man_keepass_uuid
  p = SecureRandom.uuid
  p[15] = '4'
  p[20] = ['8', '9', 'a', 'b'][rand(4)]
  p
end

def base64_uuid
  Base64.urlsafe_encode64(poor_man_keepass_uuid, padding: true)
end

def password_item(record, coder)
  item = {}
  item['Title']    = coder.encode(record[TITLE])    if TITLE > -1
  item['UserName'] = coder.encode(record[USERNAME]) if USERNAME > -1
  item['URL']      = coder.encode(record[URL])      if URL > -1
  if PASSWORD > -1
    pwd = coder.encode(record[PASSWORD])
    if pwd.length > 65536
      title = (TITLE > - 1) ? "'" + record[TITLE] + "'" : "with no title"
      puts "Warning: item #{title} has a password longer than 65536 characters."
      puts "Warning: passwords longer than 65536 characters are stored as notes."
      item['Notes'] = pwd
    else
      item['Password'] = pwd
      item['Notes'] = coder.encode(record[NOTES]) if NOTES > -1
    end
  end
  return item
end

def xml_entry(record)
 s  = "<Entry>"
 s += "<UUID>#{base64_uuid()}</UUID>"
  record.each do |k,v|
    next if v.nil? or v.empty?
    s += "<String>"
    s += "<Key>#{k}</Key>"
    s += "<Value>#{v}</Value>"
    s += "</String>"
  end
  s += '</Entry>'
  return s
end


# Main
options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: csv2keepassxml [options] <path>"

  opts.on("-g", "--group NUM", Integer, "Column number of categories") do |o|
    options[:group] = o
  end
  opts.on("-n", "--notes NUM", Integer, "Column number of notes") do |o|
    options[:password] = o
  end
  opts.on("-p", "--password NUM", Integer, "Column number of passwords") do |o|
    options[:password] = o
  end
  opts.on("-t", "--title NUM", Integer, "Column number of titles") do |o|
    options[:title] = o
  end
  opts.on("-u", "--username NUM", Integer, "Column number of usernames") do |o|
    options[:username] = o
  end
  opts.on("-U", "--url NUM", Integer, "Column number of URLs") do |o|
    options[:url] = o
  end
  opts.on("-d", "--dbname NAME", "Name of the database") do |o|
    options[:dbname] = o
  end
  opts.on("-H", "--[no-]header", "Parse a CSV with/without header") do |o|
    options[:header] = o
  end
  opts.on("-M", "--macoskeychain", "Parse the output of CSVKeychain") do |o|
    options[:macoskeychain] = o
  end
  opts.on("-h", "--help", "Prints this help") do
    puts opts
    exit
  end
  opts.on("-v", "--[no-]verbose", "Be verbose") do |o|
    options[:verbose] = o
  end
end.parse!

input_file = ARGV.first

if input_file.nil?
  puts "Please specify the path of a CSV file."
  exit(1)
end

output_file = File.join(File.dirname(input_file), File.basename(input_file, '.csv') + '.xml')
options[:dbname] ||= 'NewDatabase'

URL      = options.fetch(:url,       options.fetch(:macoskeychain, false) ? 1  : 0) - 1
USERNAME = options.fetch(:username,  options.fetch(:macoskeychain, false) ? 2  : 0) - 1
PASSWORD = options.fetch(:password,  options.fetch(:macoskeychain, false) ? 3  : 0) - 1
TITLE    = options.fetch(:title,     options.fetch(:macoskeychain, false) ? 4  : 0) - 1
NOTES    = options.fetch(:notes,     options.fetch(:macoskeychain, false) ? 5  : 0) - 1
GROUP    = options.fetch(:group,     options.fetch(:macoskeychain, false) ? 14 : 0) - 1

coder = HTMLEntities.new

items = {
  'General' => [],
  'EMail' => [],
  'Internet' => [],
  'Network' => [],
  'Notes' => []
}

n = 0
CSV.foreach(input_file, :headers => options.fetch(:header, true)) do |row|
  n += 1
  if options.has_key?(:group) or options.has_key?(:macoskeychain)
    items[row[GROUP]] ||= []
    items[row[GROUP]] << password_item(row, coder)
    next
  end
  # No group info
  items['General'] << password_item(row, coder)
end

puts "Parsed #{n} rows." if options[:verbose]

num_entries = 0
File.open(output_file, 'w') do |f|
  f.puts '<?xml version="1.0" encoding="utf-8" standalone="yes"?>'
  f.puts '<KeePassFile>'
  f.puts '  <Meta>'
  f.puts '    <Generator>csv2keepassxml</Generator>'
  f.puts "    <DatabaseName>#{options[:dbname]}</DatabaseName>"
  f.puts '  </Meta>'
  f.puts '<Root>'
  f.puts '  <Group>'
  f.puts "    <UUID>#{base64_uuid()}</UUID>"
  f.puts "    <Name>General</Name>"
  f.puts '    <Notes />'
  items['General'].each do |record|
    f.puts xml_entry(record)
    num_entries += 1
  end
  items.keys.select { |k| k != 'General' }.each do |group|
    f.puts '    <Group>'
    f.puts "      <UUID>#{base64_uuid()}</UUID>"
    f.puts "      <Name>#{coder.encode(group)}</Name>"
    items[group].each do |record|
      f.puts xml_entry(record)
      num_entries += 1
    end
    f.puts '    </Group>'
  end
  f.puts   '</Group>'
  f.puts '</Root>'
  f.puts '</KeePassFile>'
end
puts 'Done!'
puts "#{num_entries} items converted."
